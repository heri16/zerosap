/*
 * http://askubuntu.com/questions/330589/how-to-compile-and-install-dnscrypt
 * https://www.digitalocean.com/community/tutorials/how-to-install-zeromq-from-source-on-a-centos-6-x64-vps
 */

var zerorpc = require('zerorpc');
var fs = require('fs');
var crypto = require('crypto');

// Patch ZeroRPC API to add features such as encryption
require('./lib/patches').zerorpc(zerorpc);

/* Function to calculate SHA1 of a file */
var digestFileSHA1 = function(filePath, cb) {
    var hash = crypto.createHash('sha1');
    var stream = fs.createReadStream(filePath);

    stream.on('data', function(chunk) { hash.update(chunk); });
    stream.on('end', function() { cb(null, hash.digest('hex')); });
};

/* BEGIN OUR CODE */
var rpcMethods = {
    iter: function(from, to, step, reply) {
        for(var i=from; i<to; i+=step) {
            reply(null, i, true);
        }

        reply();
    },

    streamFile: function(path, range) {
        var reply = arguments[arguments.length - 1];

        console.log('streamFile: ' + path);

        var readable = fs.createReadStream(path);
        readable.on('data', function(chunk) {
            //console.log('got %d bytes of data', chunk.length);
            reply(null, chunk, true)
        });
        readable.on('end', function() {
            reply();
        });
        readable.on('error', function(err) {
            console.log(err);
            reply(err);
        });

    }
};


// Keys generated by /usr/local/bin/curve_keygen
var zmqPublicKey = new Buffer('ea1cc8bd7c8af65497d43fc21dbec6560c5e7b61bcfdcbd2b0dfacf0b4c38d45', 'hex')
    , zmqPrivateKey = new Buffer('83f99afacfab052406e5f421612568034e85f4c8182a1c92671e83dca669d31d', 'hex');

var zmqSidPorts = {
    DEV: 4242,
    PRD: 4252
};
var zmqSidKeys = {
    DEV: new Buffer('7f188e5244b02bf497b86de417515cf4d4053ce4eb977aee91a55354655ec33a', 'hex'),
    PRD: new Buffer('7f188e5244b02bf497b86de417515cf4d4053ce4eb977aee91a55354655ec33a', 'hex')
};

// ZeroRPC Server waits for incoming connection, before being invoked by a call that is initiated from remote site
var server = new zerorpc.Server(rpcMethods);
server.curveEnable(zmqPrivateKey);
//server.bind(endpoint);

// ZeroRPC Client waits for incoming connection, before initiating a call to invoke function on remote site
var client = new zerorpc.Client();
client.curveEnable(zmqPrivateKey, zmqPublicKey);
// Encrypted connection requires a long-term public key of the remote node
client.curveServerKey( zmqSidKeys['DEV'] );
client.bind('tcp://0.0.0.0:' + zmqSidPorts['DEV']);


// ZeroRPC Client invokes the RPC server once the remote server is connected
var test = function() {
    // Invoke ping to check RFC server is alive
    client.invoke('ping', function(err, res, more) {
        if (err) return console.log(err);
        console.log('RFC Server responded to ping.');

        // Calculate checksum
        digestFileSHA1('data/import.xml', function(err, checksum) {
            //console.log("SHA1: " + checksum);

            var port = 4243;
            var endpoint = "tcp://0.0.0.0:" + port;
            try { server.bind(endpoint); } catch(ex) { console.log(ex); }
            client.invoke('download_file', "tcp://10.0.1.230:" + port, zmqPublicKey, 'streamFile', ['data/import.xml'], checksum, function(err, res, more) {
                if(err) return console.log(err);
                console.log('uploadFile: ' + res);
                server.unbind(endpoint);

                client.invoke('hello', "SAP", function(err, res) {
                    if(err) return console.log(err);
                    console.log(res['ECHOTEXT']);
                });
            });

        });

    });
};

test();
setInterval(test, 10000);
